{"root":{"data":{"id":"e44dd5f21374","created":1608907700,"text":"Interview","expandState":"expand"},"children":[{"data":{"id":"c81y83tmi940","created":1608907826556,"text":"计算机基础","progress":1,"layout":null,"expandState":"expand"},"children":[{"data":{"id":"c81zn98wm340","created":1608911834936,"text":"网络七层结构","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c81zs5c8lns0","created":1608912218252,"text":"应用层","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zsc9lrjk0","created":1608912233329,"text":"表示层：定义数据格式和加密","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81ztrgp1rk0","created":1608912344774,"text":"会话层：定义如何开始、控制和结束一个对话","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81ztuw4sc80","created":1608912352238,"text":"传输层：选择传输协议，并添加协议头如 TCP、UDP","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zty8l18o0","created":1608912359521,"text":"网络层","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zsf5usns0","created":1608912239633,"text":"数据链路层","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zsovxtgg0","created":1608912260801,"text":"物理层","layout":null,"expandState":"expand"},"children":[]}]},{"data":{"id":"c81znqz013s0","created":1608911873519,"text":"HTTP 三次挥手和四次握手","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c88hxay8rds0","created":1609572762005,"text":"HTTP 状态码","expandState":"expand"},"children":[{"data":{"id":"c88hxnsh0vc0","created":1609572789954,"text":"分类"},"children":[{"data":{"id":"c88hxqxeyrc0","created":1609572796783,"text":"1XX 信息性状态码。接收的请求正在处理"},"children":[]},{"data":{"id":"c88hyew4ws80","created":1609572848949,"text":"2XX 成功状态码。请求正常处理完毕"},"children":[]},{"data":{"id":"c88hyqujkc00","created":1609572874974,"text":"3XX 重定向状态码。需要进行附加操作以完成请求"},"children":[]},{"data":{"id":"c88hzd96uc80","created":1609572923749,"text":"4XX 客服端错误状态码。服务器无法处理请求"},"children":[]},{"data":{"id":"c88i04xcl6w0","created":1609572983983,"text":"5XX 服务器错误状态码。服务器处理请求出错"},"children":[]}]},{"data":{"id":"c81zpzmv7js0","created":1608912049105,"text":"HTTP 状态码","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c87xzhg1ujc0","created":1609516510672,"text":"200 ok"},"children":[]},{"data":{"id":"c87xzhg26hs0","created":1609516510673,"text":"204 No Content 请求成功，不返回实体"},"children":[]},{"data":{"id":"c87xzhg1vts0","created":1609516510673,"text":"301 永久重定向"},"children":[]},{"data":{"id":"c87xzhg20ps0","created":1609516510673,"text":"302 临时重定向"},"children":[]},{"data":{"id":"c87xzhg2ia00","created":1609516510674,"text":"400 Bad Request 请求语法错误"},"children":[]},{"data":{"id":"c87xzhg2ids0","created":1609516510674,"text":"401 认证失败"},"children":[]},{"data":{"id":"c87xzhg33s00","created":1609516510675,"text":"403 请求拒绝"},"children":[]},{"data":{"id":"c87xzhg34m80","created":1609516510675,"text":"404 资源不存在"},"children":[]},{"data":{"id":"c87xzhg3ea80","created":1609516510675,"text":"500 服务器内部错误"},"children":[]},{"data":{"id":"c87xzhg3vhc0","created":1609516510676,"text":"503 Service Unavailable 服务不可达"},"children":[]}]}]},{"data":{"id":"c81zqb22jdc0","created":1608912073969,"text":"HTTP 安全问题","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c81zujd3z480","created":1608912405507,"text":"明文通讯","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zun8e62g0","created":1608912413929,"text":"不验证身份","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zur4zv7c0","created":1608912422431,"text":"不验证数据完整性","layout":null,"expandState":"expand"},"children":[]}]},{"data":{"id":"c81zoaiz0000","created":1608911916086,"text":"HTTPS 原理，非对称加密和混合加密算法","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c88sxrklac80","created":1609603830394,"text":"通讯步骤"},"children":[{"data":{"id":"c88sy6agdhc0","created":1609603862432,"text":"客户端发情请求"},"children":[]},{"data":{"id":"c88szowq6140","created":1609603981325,"text":"服务端将公钥证书返回客户端"},"children":[]},{"data":{"id":"c88tsqasrfk0","created":1609606256914,"text":"客户端验证公钥证书"},"children":[]},{"data":{"id":"c88tsxwbthc0","created":1609606273453,"text":"客户端使用随机数进行加密生成所使用的对称密钥，\n然后用证书加密后发送给服务端"},"children":[]},{"data":{"id":"c88tu20nk2w0","created":1609606360786,"text":"服务端用私钥解密得到对称密钥"},"children":[]},{"data":{"id":"c88tuwsmyjc0","created":1609606427781,"text":"服务端使用对称密钥加密明文内容，发送给客户端"},"children":[]},{"data":{"id":"c88tv8pmp1k0","created":1609606453721,"text":"客户端使用对称密钥解密"},"children":[]}]},{"data":{"id":"c88sv5prars0","created":1609603626088,"text":"SSL 功能"},"children":[{"data":{"id":"c88svctsik00","created":1609603641570,"text":"加密（防窃听）"},"children":[]},{"data":{"id":"c88svkcu8ps0","created":1609603657959,"text":"认证（防伪装）"},"children":[]},{"data":{"id":"c88svpxu7540","created":1609603670113,"text":"完整性保护（防篡改）"},"children":[]}]}]},{"data":{"id":"c81zpw289140","created":1608912041327,"text":"HTTPS 缺点","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c81zuzu1u9k0","created":1608912441360,"text":"需要加密解密","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zvhtpdls0","created":1608912480521,"text":"证书费用","layout":null,"expandState":"expand"},"children":[]}]},{"data":{"id":"c81zns89b940","created":1608911876256,"text":"进程、线程和协程","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c87y0gnvvjc0","created":1609516587334,"text":"进程：程序执行时的一个实例，一个进程至少包括一个线程，\n同进程里多个线程共享数据"},"children":[]},{"data":{"id":"c87y1ejq6rk0","created":1609516661093,"text":"线程：cpu 调度的基本单位，线程上下文切换代价比进程小"},"children":[]},{"data":{"id":"c87y1y7uu0o0","created":1609516703911,"text":"协程：一种用户态的轻量级线程，一个线程可包含多个线程。\n进程和线程都是同步的，协程是异步的。"},"children":[]}]},{"data":{"id":"c81zrqo5adc0","created":1608912186319,"text":"Web 攻击方式和防范","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c81zvz2gv3k0","created":1608912518056,"text":"XSS 跨站脚本攻击","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zwvotqyw0","created":1608912589065,"text":"CSRF 跨站请求伪造","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"c81zx0oh2bk0","created":1608912599928,"text":"SQL 注入","layout":null,"expandState":"expand"},"children":[]}]},{"data":{"id":"c88spbz562g0","created":1609603169532,"text":"代理"},"children":[{"data":{"id":"c88sqhouyk00","created":1609603260335,"text":"类型"},"children":[{"data":{"id":"c88sqo6qq2g0","created":1609603274477,"text":"正向代理 用户察觉得到正向代理的存在。\n例如内网机器通过代理访问公网。"},"children":[]},{"data":{"id":"c88sqqxe7fk0","created":1609603280442,"text":"反向代理：一般位于内部网络中，用户察觉不到。\n例如 nginx 反向代理多个服务。"},"children":[]}]},{"data":{"id":"c88spek03so0","created":1609603175147,"text":"作用"},"children":[{"data":{"id":"c88spho0xnk0","created":1609603181920,"text":"缓存"},"children":[]},{"data":{"id":"c88spkxa3ao0","created":1609603189010,"text":"负载均衡"},"children":[]},{"data":{"id":"c88spqepmlc0","created":1609603200948,"text":"网络访问控制"},"children":[]},{"data":{"id":"c88spuerj680","created":1609603209659,"text":"访问日志记录"},"children":[]}]}]}]},{"data":{"id":"c81y8hzeju00","created":1608907857380,"text":"Java基础","progress":1,"expandState":"expand","layout":null},"children":[{"data":{"id":"c81zxqlxd0w0","created":1608912656370,"text":"面向对象","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c8201n4ltc80","created":1608912962249,"text":"三个特性","layout":null},"children":[{"data":{"id":"c8201u04www0","created":1608912977216,"text":"封装：封装了数据和操作这些数据的逻辑实体","layout":null},"children":[]},{"data":{"id":"c8201vpbxxs0","created":1608912980917,"text":"继承：使用基类的属性和方法","layout":null},"children":[]},{"data":{"id":"c8201ymt8ps0","created":1608912987295,"text":"多态：类实例在不同情形下有不用的变现形式","layout":null},"children":[]}]},{"data":{"id":"c82ux3drpsw0","created":1609000060218,"text":"五大原则"},"children":[{"data":{"id":"c88txb1miu80","created":1609606615528,"text":"单一职责职责：单一功能，不做不关本类的事情"},"children":[]},{"data":{"id":"c88txjkfk540","created":1609606634080,"text":"开发封闭原则：对扩展开放，对修改封闭"},"children":[]},{"data":{"id":"c88txqe2smo0","created":1609606648933,"text":"替换原则：子类可替换父类"},"children":[]},{"data":{"id":"c88txvwtwzc0","created":1609606660951,"text":"依赖倒置原则：使用抽象接口，不直接用实现类，实现类变化时不用改接口"},"children":[]},{"data":{"id":"c88txzyeh0o0","created":1609606669753,"text":"接口分离原则：模块之间通过抽象接口隔离，而不是用具体类耦合"},"children":[]}]}]},{"data":{"id":"c88u11ne17c0","created":1609606908533,"text":"反射"},"children":[{"data":{"id":"c88u186fwoo0","created":1609606922746,"text":"Java可以通过反射获取方法名称、方法参数和返回值类型等等，\n但无法获取参数名称"},"children":[]},{"data":{"id":"c88u1bxrqo00","created":1609606930929,"text":"使用反射对类进行动态装配，降低代码耦合度。动态代理会使用到，\n但过分使用或严重消耗系统资源"},"children":[]}]},{"data":{"id":"c8202fge9yo0","created":1608913023912,"text":"线程","layout":null},"children":[{"data":{"id":"c82ushaz1sg0","created":1608999698703,"text":"线程生命周期","note":"![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3f55f43-64c7-42c2-8fd4-1389f90a6f66/Untitled.png](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a3f55f43-64c7-42c2-8fd4-1389f90a6f66/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20201226%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20201226T162656Z&X-Amz-Expires=86400&X-Amz-Signature=ff8b5b4f38e546b453be5c8120ca7b9a122e220aced5f4d4ee7f6544862557a2&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22)\n\n线程的生命周期包含5个阶段，包括：新建、就绪、运行、阻塞、销毁。\n\n- 新建：就是刚使用new方法，new出来的线程；\n- 就绪：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;\n- 运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;\n- 阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;\n- 销毁：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;"},"children":[{"data":{"id":"c82usnik2eg0","created":1608999712222,"text":"创建 new duixiang"},"children":[]},{"data":{"id":"c82usya021s0","created":1608999735650,"text":"就绪 线程执行 start() 方法"},"children":[]},{"data":{"id":"c82utlrcn2g0","created":1608999786765,"text":"运行"},"children":[]},{"data":{"id":"c82uttjgcr40","created":1608999803702,"text":"阻塞"},"children":[]},{"data":{"id":"c82utw54b1s0","created":1608999809365,"text":"销毁"},"children":[]}]},{"data":{"id":"c82upjnp9hc0","created":1608999468734,"text":"创建线程方法"},"children":[{"data":{"id":"c82upn7qfps0","created":1608999476476,"text":"继承 Thread 类重写 run() 方法"},"children":[]},{"data":{"id":"c82uq0havbs0","created":1608999505352,"text":"实现 Runnable 接口的 run() 方法"},"children":[]},{"data":{"id":"c82uqww5e140","created":1608999575907,"text":"实现 Callable 接口，使用 FutureTask 类创建线程 "},"children":[]}]},{"data":{"id":"c83ncptlqn40","created":1609080275605,"text":"ThreadLocal 线程局部变量，同一个 ThreadLocal 所包含的对象，\n在不同的 Thread 中有不同的副本。"},"children":[{"data":{"id":"c840ihwfb540","created":1609117402975,"text":"使用场景"},"children":[{"data":{"id":"c840in34lmg0","created":1609117414264,"text":"JDBC连接池、存储session"},"children":[]}]},{"data":{"id":"c840iphwhds0","created":1609117419511,"text":"作用","expandState":"expand"},"children":[{"data":{"id":"c83nd28zins0","created":1609080302656,"text":"每个线程需要有自己单独的实例"},"children":[]},{"data":{"id":"c83niuhwk800","created":1609080755967,"text":"实例需要在多个方法中共享，但不希望多线程共享"},"children":[]}]},{"data":{"id":"c840iw62dnk0","created":1609117434033,"text":"内存泄漏","note":"ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用来引用它，那么系统 GC 的时候，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -> Thread -> ThreaLocalMap -> Entry -> value永远无法回收，造成内存泄漏。\n\n其实，ThreadLocalMap的设计中已经考虑到这种情况，也加上了一些防护措施：在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value。"},"children":[{"data":{"id":"c840jhfjfo00","created":1609117480318,"text":"使用ThreadLocal的弱引用作为key，没用时会被回收，\n但value不会"},"children":[]}]}]},{"data":{"id":"c88u4mjpgug0","created":1609607189115,"text":"线程池"},"children":[]}]},{"data":{"id":"c81y8tugryg0","created":1608907883203,"text":"集合框架","progress":null,"layout":null,"expandState":"expand"},"children":[{"data":{"id":"c81y94vai0w0","created":1608907907197,"text":"Collection接口","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c88u1zusrog0","created":1609606982992,"text":"List"},"children":[{"data":{"id":"c88u22rle5c0","created":1609606989328,"text":"ArrayList 初始容量10，扩容1.5倍。非线程安全，随机查询快"},"children":[]},{"data":{"id":"c88u27uupko0","created":1609607000409,"text":"Vector 线程安全，使用了 sychronized "},"children":[]},{"data":{"id":"c88u29xqgo00","created":1609607004937,"text":"LinkedList 链表结构，新增和删除快"},"children":[]}]},{"data":{"id":"c88u2f9hla00","created":1609607016533,"text":"Set"},"children":[{"data":{"id":"c88u2lu99s00","created":1609607030848,"text":"HashSet 无序不重合集合"},"children":[]},{"data":{"id":"c88u2p1c4gw0","created":1609607037806,"text":"LinkedHashSet 基于hash实现的有序集合"},"children":[]},{"data":{"id":"c88u2vi7lh40","created":1609607051888,"text":"TreeSet 基于红黑树实现的可排序集合"},"children":[]}]},{"data":{"id":"c88u2hyukmw0","created":1609607022419,"text":"Queue 队列"},"children":[]}]},{"data":{"id":"c81y9bxk5ao0","created":1608907922573,"text":"Map 接口","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c88u33hwmf40","created":1609607069283,"text":"AbstractMap"},"children":[{"data":{"id":"c88u3ny1g2g0","created":1609607113795,"text":"HashMap"},"children":[{"data":{"id":"c8ajp7lzix40","created":1609780889953,"text":"基本结构为 数组+链表/红黑树"},"children":[]},{"data":{"id":"c8ajpku35nk0","created":1609780918741,"text":"初始容量为16，负载因子0.75。若构造传入初始值n，\n初始值大小为大于n的整数，且满足2的整数次方"},"children":[]},{"data":{"id":"c8ajrnf2f340","created":1609781081092,"text":"元素所在数组下标定位，hash函数实现"},"children":[{"data":{"id":"c8ajs2q1rds0","created":1609781114408,"text":"先计算key的hashcode值，将高16位和低16位进行异或操作"},"children":[]},{"data":{"id":"c8ajswypjn40","created":1609781180235,"text":"容量减1和hash进行取模确定数组下标值"},"children":[]}]},{"data":{"id":"c8ajtq2mfug0","created":1609781243598,"text":"链表容量达到8会转成红黑树"},"children":[]},{"data":{"id":"c8ajuhpwrw00","created":1609781303780,"text":"并发问题"},"children":[{"data":{"id":"c8ajum3v3qw0","created":1609781313330,"text":"1.7 在多线程环境下，扩容时会造成环形链或数据丢失"},"children":[]},{"data":{"id":"c8ajv13kq540","created":1609781345964,"text":"1.8 在多线程环境下，会发生数据覆盖的情况"},"children":[]}]},{"data":{"id":"c8ajv6bifg80","created":1609781357328,"text":"1.8较1.7优化部分"},"children":[{"data":{"id":"c8ajv7lxrc00","created":1609781360135,"text":"数组+链表结构改为数组+链表/红黑树，\n时间复杂度由链表O(n)降低为红黑树O(logn)"},"children":[]},{"data":{"id":"c8ajvg5o3bc0","created":1609781378743,"text":"链表的插入方式由头插法改成了尾插法。头插法可能会造成环形链"},"children":[]}]}]},{"data":{"id":"c88u3xhqcso0","created":1609607134576,"text":"LinkedHashMap 双向链表，元素默认按插入顺序排序"},"children":[]},{"data":{"id":"c88u44nms3c0","created":1609607150171,"text":"TreeMap 红黑树实现。默认按照 key 值升序排序，可指定排序比较器"},"children":[]},{"data":{"id":"c88u48oxjhs0","created":1609607158956,"text":"Hashtable 线程安全，方法上加了 synchronized"},"children":[]}]},{"data":{"id":"c88u3dsxc1s0","created":1609607091717,"text":"SortedMap"},"children":[{"data":{"id":"c88u3kn30yo0","created":1609607106602,"text":"TreeMap"},"children":[]}]},{"data":{"id":"c8ajkq93e740","created":1609780538712,"text":"ConcurrentHashMap"},"children":[{"data":{"id":"c8ajnx31tzc0","created":1609780788676,"text":"变量使用 volatile 修饰"},"children":[]},{"data":{"id":"c8ajo4swk800","created":1609780805477,"text":"使用CAS操作和synchronized结合实现赋值操作"},"children":[]}]}]}]},{"data":{"id":"c820tuqchkg0","created":1608915172998,"text":"异常处理"},"children":[{"data":{"id":"c83nyegbm200","created":1609081974869,"text":"Error 和 Exception"},"children":[]},{"data":{"id":"c83nyn8dci00","created":1609081993979,"text":"运行时异常和受检异常"},"children":[]},{"data":{"id":"c83nyvonnfs0","created":1609082012378,"text":"常见运行时异常"},"children":[]},{"data":{"id":"c83nz2a0y6o0","created":1609082026731,"text":"final、finally和finalize"},"children":[]},{"data":{"id":"c83nzb6n9ew0","created":1609082046117,"text":"throw 和 throws"},"children":[]}]},{"data":{"id":"c88u55o8oe00","created":1609607230748,"text":"锁"},"children":[{"data":{"id":"c89ecdwa5jc0","created":1609664219396,"text":"Java 实现"},"children":[{"data":{"id":"c89ecmm12lc0","created":1609664238367,"text":"sychronized 关键字"},"children":[]},{"data":{"id":"c89ed28il3c0","created":1609664272379,"text":"Lock 接口"},"children":[]}]},{"data":{"id":"c89ec9s82ds0","created":1609664210444,"text":"乐观锁和悲观锁"},"children":[]},{"data":{"id":"c89ef9jdzq80","created":1609664445002,"text":"自旋锁和适应性自旋锁"},"children":[{"data":{"id":"c8ajwr0ib280","created":1609781480739,"text":"自适应意味着自旋的时间（次数）不再固定，\n而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定"},"children":[]}]},{"data":{"id":"c89efo1aogw0","created":1609664476560,"text":"无锁、偏向锁、轻量级锁和重量级锁"},"children":[{"data":{"id":"c8ajxoomnmo0","created":1609781554032,"text":"轻量级锁自旋实现"},"children":[]}]},{"data":{"id":"c8ajzpnsx280","created":1609781712887,"text":"公平锁 VS 非公平锁"},"children":[{"data":{"id":"c8ajzsvqot40","created":1609781719897,"text":"公平锁：队列排队执行，其他线程全部堵塞，cpu唤醒线程代价大"},"children":[]},{"data":{"id":"c8ak0qoyyzc0","created":1609781793499,"text":"非公平锁：CPU不必唤醒所有线程。缺点是处于等待队\n列中的线程可能会饿死，或者等很久才会获得锁"},"children":[]}]},{"data":{"id":"c89egjn5wfk0","created":1609664545362,"text":"可重入锁和不可重入锁"},"children":[{"data":{"id":"c8ak2dhelq00","created":1609781921471,"text":"status 值，线程占有加1，不可重入判断 satus 值来决定能不能拿到锁"},"children":[]}]},{"data":{"id":"c89egrysvx40","created":1609664563480,"text":"独享锁和共享锁"},"children":[]}]}]},{"data":{"id":"c81zybk7cvc0","created":1608912701979,"text":"JVM","progress":1,"layout":null,"expandState":"expand"},"children":[{"data":{"id":"c8200cfrsr40","created":1608912860616,"text":"类加载步骤","expandState":"expand","layout":null},"children":[{"data":{"id":"c82176070sg0","created":1608916216272,"text":"加载"},"children":[{"data":{"id":"c87wtitlwko0","created":1609513222374,"text":"获取类的二进制字节流"},"children":[]},{"data":{"id":"c87wtra908o0","created":1609513240795,"text":"将字节流代表的静态存储结构转化为方法区运行时的数据结构"},"children":[]},{"data":{"id":"c87wuac4umw0","created":1609513282267,"text":"在堆中生成 class 字节码对象"},"children":[]}]},{"data":{"id":"c8217blfwcw0","created":1608916228441,"text":"验证：验证 class 文件字节流包含的信息符合当前虚拟机要求"},"children":[]},{"data":{"id":"c8217daw3kw0","created":1608916232156,"text":"准备：为类的静态变量分配内存并将其初始化为默认值"},"children":[]},{"data":{"id":"c8217x8t0rk0","created":1608916275566,"text":"解析：虚拟机将常量池内符号引用替换成直接引用的过程"},"children":[]},{"data":{"id":"c8217ydizcg0","created":1608916278028,"text":"初始化：执行类构造器的初始化过程"},"children":[]}]},{"data":{"id":"c8200i50ltk0","created":1608912873026,"text":"类加载机制","expandState":"expand","layout":null},"children":[{"data":{"id":"c87wxeex3yo0","created":1609513526235,"text":"类加载器"},"children":[{"data":{"id":"c87wxwlnmkw0","created":1609513565825,"text":"启动类加载器（Bootstrap ClassLoader）\n负责加载 <JRE_HOME>\\lib 目录中的类库，如 rt.jar"},"children":[]},{"data":{"id":"c87x18x7fcg0","created":1609513827737,"text":"扩展类加载器（Extension ClassLoader）\n负责加载 <JRE_HOME>\\lib\\ext 目录中类库"},"children":[]},{"data":{"id":"c87x2b0d6sg0","created":1609513910646,"text":"应用类加载器（Application ClassLoader）\n负责加载用户路径下的类库"},"children":[]}]},{"data":{"id":"c82uxdiz0280","created":1609000082301,"text":"双亲委派机制：一个类加载器首先将类加载请求转发到父类加载器，\n只有当父类加载器无法完成时才尝试自己加载。"},"children":[]},{"data":{"id":"c82uxhpqaq80","created":1609000091417,"text":"如何打破双亲委派机制 "},"children":[{"data":{"id":"c87x50jir8w0","created":1609514122952,"text":"自定义类加载器"},"children":[]},{"data":{"id":"c82uyd1qhs80","created":1609000159622,"text":"数据库驱动例子"},"children":[]}]}]},{"data":{"id":"c8212joqhaw0","created":1608915854233,"text":"JVM 内存模型"},"children":[{"data":{"id":"c821873iov40","created":1608916297014,"text":"类加载器子系统"},"children":[]},{"data":{"id":"c82189wencg0","created":1608916303114,"text":"运行时数据区"},"children":[]},{"data":{"id":"c8219ofqpfs0","created":1608916413123,"text":"执行引擎"},"children":[]}]},{"data":{"id":"c8212rcm2jk0","created":1608915870915,"text":"运行时数据区"},"children":[{"data":{"id":"c82130kgpwo0","created":1608915890980,"text":"虚拟机栈：每个 Java 方法在执行过程的同时会创建一\n个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。"},"children":[]},{"data":{"id":"c82137t74k00","created":1608915906746,"text":"本地方法栈：与虚拟机栈相似，区别只是为本地方法服务的"},"children":[]},{"data":{"id":"c8213dmi2lc0","created":1608915919402,"text":"程序计数器：记录正在执行的虚拟机字节码指令的地址"},"children":[]},{"data":{"id":"c8213gtrrlk0","created":1608915926372,"text":"堆：存储对象实例"},"children":[]},{"data":{"id":"c8213hy9euo0","created":1608915928820,"text":"方法区：用于存放已被记载的类信息、常量、静态变量和编译后的代码等数据。"},"children":[]},{"data":{"id":"c87xczzx2eo0","created":1609514748681,"text":"+运行时常量池：方法区的一部分， Class 文件中的常量池（编译时生成的字面量和符号引用）\n会在类加载后被放入这个区域"},"children":[]},{"data":{"id":"c87xeupukq80","created":1609514893916,"text":"+直接内存：一些 Native 函数直接分配对外内存"},"children":[]}]},{"data":{"id":"c82uyyg4pls0","created":1609000206205,"text":"垃圾回收判断"},"children":[{"data":{"id":"c82uz68pfaw0","created":1609000223171,"text":"引用计数算法：引用数为0的对象回收，难以解决对象循环引用问题"},"children":[]},{"data":{"id":"c82uzeri5oo0","created":1609000241722,"text":"根搜索法（可达性算法）：从 GC Root 对象开始向下搜索，\n可达的对象都是存活的，不可达的对象无法被回收"},"children":[]}]},{"data":{"id":"c82uzr0n9ig0","created":1609000268396,"text":"垃圾回收算法"},"children":[{"data":{"id":"c87woqad0co0","created":1609512846804,"text":"标记-清除"},"children":[]},{"data":{"id":"c87wovyx4io0","created":1609512859173,"text":"标记-整理"},"children":[]},{"data":{"id":"c87wou03bsw0","created":1609512854890,"text":"复制"},"children":[]},{"data":{"id":"c87xkfvockg0","created":1609515331801,"text":"分代收集"},"children":[{"data":{"id":"c87xkwcbefc0","created":1609515367636,"text":"新生代使用复制算法"},"children":[]},{"data":{"id":"c87xl3f763c0","created":1609515383048,"text":"老年代使用标记-清除或者标记-整理算法"},"children":[]}]}]},{"data":{"id":"c82uzvxxmn40","created":1609000279116,"text":"垃圾回收器","note":"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6"},"children":[{"data":{"id":"c87xlpa29og0","created":1609515430626,"text":"Serial 收集器"},"children":[]},{"data":{"id":"c87xltay0qg0","created":1609515439387,"text":"ParNew 收集器"},"children":[]},{"data":{"id":"c87xlwtjcdc0","created":1609515447041,"text":"Parallel Scavenge 收集器"},"children":[]},{"data":{"id":"c87xm2n8e000","created":1609515459721,"text":"Serial Old 收集器"},"children":[]},{"data":{"id":"c87xm5qnaqg0","created":1609515466458,"text":"Parallel Old 收集器"},"children":[]},{"data":{"id":"c87xmb420e00","created":1609515478152,"text":"CMS 收集器"},"children":[]},{"data":{"id":"c87xmf850dk0","created":1609515487106,"text":"G1 收集器"},"children":[]}]},{"data":{"id":"c87xn335ymo0","created":1609515539048,"text":"内存分配与回收策略"},"children":[{"data":{"id":"c87xnjs4ms80","created":1609515575386,"text":"Minor GC 和 Full GC"},"children":[{"data":{"id":"c87xnt24xh40","created":1609515595583,"text":"Minor GC：回收新生代，因为新生代对象存活时间很短，因此会频繁执行，速度较快"},"children":[]},{"data":{"id":"c87xos5k2c80","created":1609515671977,"text":"Full GC：回收老年代和新生代，老年代对象存活时间长，因此 Full GC 很少执行，\n执行速度会比 Minor GC 慢很多"},"children":[]}]},{"data":{"id":"c87xqp656rs0","created":1609515822210,"text":"内存分配策略"},"children":[{"data":{"id":"c87xqv4n7hs0","created":1609515835180,"text":"对象有限在 Eden 分配"},"children":[]},{"data":{"id":"c87xr4ji5g80","created":1609515855670,"text":"大对象直接进入老年代"},"children":[]},{"data":{"id":"c87xrde98q00","created":1609515874943,"text":"长期存活的对象进入老年代"},"children":[]},{"data":{"id":"c87xs8stp6g0","created":1609515943306,"text":"动态对象年龄判定"},"children":[]},{"data":{"id":"c87xshoillc0","created":1609515962635,"text":"空间分配担保"},"children":[]}]},{"data":{"id":"c87xu8ibokg0","created":1609516099398,"text":"Full GC 触发条件"},"children":[{"data":{"id":"c87xumlxcco0","created":1609516130091,"text":"调用 System.gc()"},"children":[]},{"data":{"id":"c87xvkp309s0","created":1609516204292,"text":"空间分配担保失败"},"children":[]},{"data":{"id":"c87xw6rvmkw0","created":1609516252350,"text":"JDK1.7 以前的永久代空间不足"},"children":[]}]}]}]},{"data":{"id":"c81yw3nrd7k0","created":1608909706941,"text":"第三方工具","progress":1,"layout":null,"expandState":"expand"},"children":[{"data":{"id":"c820wtzn1r40","created":1608915406476,"text":"Spring"},"children":[{"data":{"id":"c839t9cfd9k0","created":1609042076390,"text":"组成","expandState":"collapse"},"children":[{"data":{"id":"c839tawxs9c0","created":1609042079807,"text":"Spring Core 框架核心，提供 IOC 容器，管理 bean 对象"},"children":[]},{"data":{"id":"c839u94x6uw0","created":1609042154300,"text":"Spring Context 提供上下文信息"},"children":[]},{"data":{"id":"c839uov2ngw0","created":1609042188533,"text":"Spring Dao 提供 JDBC 抽象层"},"children":[]},{"data":{"id":"c839voamx280","created":1609042265661,"text":"Spring ORM 提供“对象/关系”映射 APIs 的集成层"},"children":[]},{"data":{"id":"c839wlhys340","created":1609042337938,"text":"Spring AOP 切面编程功能"},"children":[]},{"data":{"id":"c839x68i3o00","created":1609042383079,"text":"Spring Web 提供 web 开发的上下文信息"},"children":[]},{"data":{"id":"c839xnvqbuo0","created":1609042421488,"text":"Spring Web MVC 提供了 web 应用的\nmodel-view-controller 实现"},"children":[]}]},{"data":{"id":"c83a09qcwyg0","created":1609042625781,"text":"IOC 和 AOP"},"children":[{"data":{"id":"c83a0fgnwlc0","created":1609042638256,"text":"IOC 控制反转，将对象交给 Spring IOC 容器控制，\n而不是显式地用代码创建对象。DI 依赖注入是它的实现"},"children":[]},{"data":{"id":"c83a210wors0","created":1609042763556,"text":"AOP 面向切面编程（@Aspect @ControllerAdvice）"},"children":[{"data":{"id":"c83a266ezig0","created":1609042774773,"text":"动态代理（jdk动态代理，cglib 动态代理）"},"children":[]},{"data":{"id":"c83a2cr8wkg0","created":1609042789094,"text":"静态织入"},"children":[]}]}]},{"data":{"id":"c83f3b11yo00","created":1609056969247,"text":"常用注解","expandState":"collapse"},"children":[{"data":{"id":"c83f3uiu2400","created":1609057011681,"text":"bean 定义注解"},"children":[{"data":{"id":"c83f3xtme0w0","created":1609057018863,"text":"@Component 描述Spring框架中的bean"},"children":[]},{"data":{"id":"c83f4rsul3c0","created":1609057084120,"text":"@Repository 用于对DAO实现类进行标注"},"children":[]},{"data":{"id":"c83f574qrgg0","created":1609057117491,"text":"@Service 用于对业务类进行标注"},"children":[]},{"data":{"id":"c83f59dqvl40","created":1609057122389,"text":"@Controller 用于对控制类进行标注"},"children":[]}]},{"data":{"id":"c83f5i8zl1c0","created":1609057141692,"text":"属性注入"},"children":[{"data":{"id":"c83f5l86xjk0","created":1609057148174,"text":"@Autowired 自动注入"},"children":[]},{"data":{"id":"c83f68k0nog0","created":1609057198955,"text":"@Autowired(required=true) 找到匹配的bean"},"children":[]},{"data":{"id":"c83f7iw90aw0","created":1609057299827,"text":"@Qualifier 可指定 bean 名称，用于多个同接口实现"},"children":[]},{"data":{"id":"c83f86dsmvc0","created":1609057350954,"text":"@Resource 是 jdk 注解，与@Autowired 类似"},"children":[]}]},{"data":{"id":"c83fb0daakg0","created":1609057572955,"text":"其他"},"children":[{"data":{"id":"c83fb79n36w0","created":1609057587972,"text":"@PostConStruct() 初始化"},"children":[]},{"data":{"id":"c83fbaanthk0","created":1609057594564,"text":"@PreDestory() 销毁"},"children":[]},{"data":{"id":"c83fbg859080","created":1609057607473,"text":"@Scope() 指定作用域"},"children":[]},{"data":{"id":"c83fbzul4pk0","created":1609057650188,"text":"@Profile() 指定环境 bean 生效"},"children":[]}]}]},{"data":{"id":"c83fcix319c0","created":1609057691698,"text":"用到哪些设计模式","note":"常用设计模式 https://www.cnblogs.com/kyoner/p/10949246.html\n\n- 工厂模式：Spring使用工厂模式可以通过 `BeanFactory` 或 `ApplicationContext` 创建 bean 对象；\n- 单例模式：Spring中bean的默认作用域就是singleton(单例)的；\n- 代理模式：Spring AOP就是基于动态代理的；\n- 观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用。`ApplicationListener` 监听器；\n- 适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配Controller；\n- 模版方法模式：Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\n- 装饰者模式"},"children":[{"data":{"id":"c83fcrbvhcg0","created":1609057710007,"text":"单例"},"children":[]},{"data":{"id":"c83fcv5nygg0","created":1609057718339,"text":"动态代理"},"children":[]},{"data":{"id":"c83fcx8f9fk0","created":1609057722859,"text":"工厂"},"children":[]},{"data":{"id":"c83fd4nxm340","created":1609057739034,"text":"适配器"},"children":[]},{"data":{"id":"c83fdacvhls0","created":1609057751426,"text":"观察者"},"children":[]},{"data":{"id":"c83fddz7d7k0","created":1609057759307,"text":"装饰者"},"children":[]},{"data":{"id":"c83fdfimucg0","created":1609057762658,"text":"模版"},"children":[]}]}]},{"data":{"id":"c820wyg2mow0","created":1608915416176,"text":"Redis","expandState":"expand"},"children":[{"data":{"id":"c82m2e7jui00","created":1608975085618,"text":"基本数据类型","note":"- string 字符串。常用命令 set,get,decr,incr,mget 等。常用在缓存、计数、共享Session、限速等；\n- hash 哈希。常用命令 hget,hset,hgetall 等。哈希类型是指键值本身又是一个键值对结构。哈希可以用来存放用户信息，比如实现购物车；\n- list 列表。常用命令 lpush,rpush,lpop,rpop,lrange 等。列表（list）类型是用来存储多个有序的字符串。可以做简单的消息队列的功能。另外，可以利用 lrange 命令，做基于 Redis的分页功能，性能极佳；\n- set 集合。常用命令 sadd,spop,smembers,sunion 等。集合中不允许有重复元素，且元素是无序的。利用 Set 的交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能；\n- zset(sorted set) 有序集合。常用命令 zadd,zrange,zrem,zcard 等。多了一个权重参数 Score，集合中的元素能够按 Score 进行排列。可以做排行榜应用，取 TOP N 操作。"},"children":[{"data":{"id":"c82m2hxy4vc0","created":1608975093745,"text":"字符串 String"},"children":[]},{"data":{"id":"c82m2nnirnk0","created":1608975106175,"text":"列表 List"},"children":[]},{"data":{"id":"c82m2rw1wi00","created":1608975115398,"text":"哈希 Hash"},"children":[]},{"data":{"id":"c82m3nkoua80","created":1608975184368,"text":"集合 Set"},"children":[]},{"data":{"id":"c82m3qfgm340","created":1608975190582,"text":"有序集合 Zset（sorted set）"},"children":[]}]},{"data":{"id":"c82m4er96o00","created":1608975243538,"text":"持久化方式","note":"- RDB 半持久化，每隔一段时间进行持久化，只有一个dump.rdb文件，容灾好，恢复容易，但故障容易丢失数据；\n- AOF 日志追加方式，不容易丢失数据，但持久化文件较大，恢复慢。"},"children":[{"data":{"id":"c82m4h1iotc0","created":1608975248512,"text":"RDB 每隔一段时间持久化"},"children":[]},{"data":{"id":"c82m4mbtf880","created":1608975260019,"text":"AOF 日志追加"},"children":[]}]},{"data":{"id":"c83a60tfrts0","created":1609043076561,"text":"主从、哨兵和 cluster 集群","note":"- 主从：分摊读压力，主节点故障可根据其他节点恢复\n- 哨兵：高可用，主节点故障时从节点竞选出新的主节点\n- cluster 集群：数据切割分布到各个节点hash槽上，通过分节点主从和分区提供一定高可用\n    - 可以如何寻址？使用哈希一致性算法。将整个哈希值空间组织成一个虚拟圆环，根据各个服务器ip或主机名作为关键字进行哈希计算确定其在哈希环位置。key对应哈希值从环顺时针滚动确定key放在哪台服务器上，碰到挂了的服务器区间会跳过，保存在下一个环位置对应的服务器，提高了**容错性**。同时增加节点干扰的数据也少，提高了**扩展性。**\n    - Redis 集群没有使用一致性 hash，而是引入了**哈希槽**的概念\n    - Redis 集群有 16384 个哈希槽，每个 key 通过 **CRC16 算法**计算的结果，对 16384 取模后放到对应的编号在 0-16383 之间的哈希槽，集群的每个节点负责一部分哈希槽\n    - 如何动态增加或删除一个节点\n\n        ./redis-trib.rb add-node 移动哈希槽到新节点\n\n        ./redis-trib.rb del-node 移动哈希槽到其他节点并删除该节点"},"children":[{"data":{"id":"c83a6aer4000","created":1609043097441,"text":"主从：分摊读写压力"},"children":[]},{"data":{"id":"c83a6fj4kzk0","created":1609043108590,"text":"哨兵：高可用"},"children":[]},{"data":{"id":"c83a6mfhk7c0","created":1609043123607,"text":"cluster 集群：兼顾两者"},"children":[]}]},{"data":{"id":"c83fgcj0ezc0","created":1609057991243,"text":"缓存穿透、击穿和雪崩","note":"- 缓存穿透：key对应的数据在数据源并不存在，从缓存获取不到，请求都会到数据源，从而可能压垮数据源。采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力；或者查询返回的数据为空仍然进行缓存，过期时间设置较短。\n- 缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，从后端DB加载数据并回设到缓存，数据库压力大。使用互斥锁(mutex key)SETNX。缓存失效的时候，不立即去load db，而是去set一个mutex key，成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。\n- 缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件"},"children":[{"data":{"id":"c83fgrcr2i80","created":1609058023517,"text":"穿透：key 不存在，压力到数据库"},"children":[]},{"data":{"id":"c83fh4klt7s0","created":1609058052290,"text":"击穿：key 失效，大量并发请求压力到数据库"},"children":[]},{"data":{"id":"c83fhmjmfe00","created":1609058091412,"text":"雪崩：大量 key 同一时间段失效，数据库压力大 "},"children":[]}]},{"data":{"id":"c83filz2rbc0","created":1609058168534,"text":"分布式锁实现"},"children":[{"data":{"id":"c83fjvqhzk00","created":1609058268148,"text":"使用 setnx 命令，抢占锁，记录线程id，解锁须判断线程再清除 key\n必须设置失效时间防止操作失败一直占着锁"},"children":[]},{"data":{"id":"c83fkulaezc0","created":1609058344020,"text":"使用框架 Redisson"},"children":[]}]},{"data":{"id":"c83fj5ww9yw0","created":1609058211938,"text":"消息队列实现方式","note":"https://www.cnblogs.com/-wenli/p/12777703.html","expandState":"collapse"},"children":[{"data":{"id":"c83hpimme140","created":1609064352020,"text":"基于异步消息队列 List lpush-brpop(rpush-blpop)"},"children":[{"data":{"id":"c845zy6ifcw0","created":1609132876154,"text":"使用rpush和lpush操作入队列，lpop和rpop操作出队列"},"children":[]},{"data":{"id":"c8460ihhos00","created":1609132920353,"text":"当队列为空时，lpop和rpop会一直空轮训，消耗资源；\n所以引入阻塞读blpop和brpop（b代表blocking），阻塞读在队列没有数据的时候进入休眠状态"},"children":[]}]},{"data":{"id":"c83hqlfqebc0","created":1609064436498,"text":"PUB/SUB 订阅/发布模式"},"children":[{"data":{"id":"c84617tnaeg0","created":1609132975508,"text":"SUBSCRIBE，用于订阅信道"},"children":[]},{"data":{"id":"c8461a9zvs00","created":1609132980850,"text":"PUBLISH，向信道发送消息"},"children":[]},{"data":{"id":"c8461c3nmmw0","created":1609132984820,"text":"UNSUBSCRIBE，取消订阅"},"children":[]}]},{"data":{"id":"c83hqx25cgw0","created":1609064461798,"text":"基于 sorted set 的实现"},"children":[{"data":{"id":"c846730wgps0","created":1609133435247,"text":"zadd 添加带分数元素"},"children":[]},{"data":{"id":"c8467dwjeq00","created":1609133458928,"text":"zrange或zrevrange返回有序集合，指定区间的成员。\n使用0，0区间来获取处于顶部的元素"},"children":[]},{"data":{"id":"c84699c8wf40","created":1609133605722,"text":"zrem 移除元素，消费后移除"},"children":[]}]},{"data":{"id":"c83hrje60jc0","created":1609064510414,"text":"基于 stream 类型的实现。stream 是redis 5.0后新增的数据结构"},"children":[]}]},{"data":{"id":"c83fir3q21s0","created":1609058179699,"text":"延迟消息实现"},"children":[{"data":{"id":"c83hubdogxc0","created":1609064728062,"text":"利用 zadd 和 zrangebyscore 来实现存入和读取消息"},"children":[]}]},{"data":{"id":"c83fjby6gi00","created":1609058225076,"text":"Sortes Set(有序列表)实现，压缩列表和跳表"},"children":[{"data":{"id":"c8492b43li80","created":1609141524364,"text":"压缩列表 ziplist"},"children":[{"data":{"id":"c849rivf5w80","created":1609143500357,"text":"有序集合保存的元素数量小于128个"},"children":[]},{"data":{"id":"c849rml2f3k0","created":1609143508439,"text":"有序集合保存的所有元素的长度小于64字节"},"children":[]}]},{"data":{"id":"c8492duzu800","created":1609141530344,"text":"跳表 skiplist"},"children":[{"data":{"id":"c849tj4949s0","created":1609143657620,"text":"一种基于有序链表的扩展，跳表会维护多个索引链表和原链表"},"children":[]},{"data":{"id":"c849u5z6l9k0","created":1609143707379,"text":"查找次数近似于层数，时间复杂度为O(logn)，插入、删除也为 O(logn)"},"children":[]},{"data":{"id":"c849viyknlc0","created":1609143814005,"text":"跳表是一种随机化的数据结构(通过抛硬币来决定插入层数)"},"children":[]},{"data":{"id":"c849vqxk7880","created":1609143831358,"text":"空间复杂度为 O(n)"},"children":[]}]}]},{"data":{"id":"c83fjfszfco0","created":1609058233469,"text":"一致性哈希和哈希槽"},"children":[{"data":{"id":"c84agttx10o0","created":1609145483315,"text":"一致性哈希（一致性hash是一个0-2^32的闭合圆）"},"children":[{"data":{"id":"c84ah2iis6o0","created":1609145502217,"text":"用于解决分布式缓存系统中的数据选择节点存储问题\n和数据选择节点读取问题\n以及在增删节点后减少数据缓存的消失范畴，防止雪崩的发生。"},"children":[]},{"data":{"id":"c84aiuwy4qo0","created":1609145642404,"text":"顺时针找到归属的节点"},"children":[]}]},{"data":{"id":"c84agvnixg00","created":1609145487282,"text":"哈希槽（redis cluster一共有2^14=16384个槽）"},"children":[{"data":{"id":"c84ahvgwt2w0","created":1609145565247,"text":"redis cluster集群没有采用一致性哈希方案，\n而是采用数据分片中的哈希槽来进行数据存储与读取的。"},"children":[]},{"data":{"id":"c84ajjhw64g0","created":1609145695913,"text":"根据CRC-16(key)384的值来判断属于哪个槽区，\n从而判断该key属于哪个节点"},"children":[]}]}]}]},{"data":{"id":"c820x03deq80","created":1608915419762,"text":"MQ","expandState":"expand"},"children":[{"data":{"id":"c839qh80d400","created":1609041858444,"text":"常用mq有哪些","expandState":"expand"},"children":[{"data":{"id":"c839qqpm5lc0","created":1609041879100,"text":"RabbitMQ"},"children":[]},{"data":{"id":"c839r2lhm5s0","created":1609041904972,"text":"RocketMQ 支持分布式事务"},"children":[]},{"data":{"id":"c839r5r5wt40","created":1609041911845,"text":"Kafka "},"children":[{"data":{"id":"c84amsi4fj40","created":1609145950610,"text":"一般用于大数据系统实时运算，日志采集"},"children":[]},{"data":{"id":"c84an6jbtiw0","created":1609145981158,"text":"功能简单，可靠性高，扩展性高"},"children":[]},{"data":{"id":"c84an8eunps0","created":1609145985241,"text":"缺点是可能导致重复消费"},"children":[]}]},{"data":{"id":"c839rb2gt2o0","created":1609041923413,"text":"ActiveMQ"},"children":[]}]},{"data":{"id":"c820zxe30xs0","created":1608915648972,"text":"主要作用"},"children":[{"data":{"id":"c820zzh1o2o0","created":1608915653504,"text":"削峰限流"},"children":[]},{"data":{"id":"c82105gnneg0","created":1608915666542,"text":"异步处理"},"children":[]},{"data":{"id":"c8210dxqu1s0","created":1608915684989,"text":"应用解耦"},"children":[]}]},{"data":{"id":"c84ap3n8pyw0","created":1609146131593,"text":"使用场景","expandState":"expand"},"children":[{"data":{"id":"c84anmwluko0","created":1609146016790,"text":"秒杀抢购场景流量削峰，入队列，超过最大长度丢弃"},"children":[]},{"data":{"id":"c84apcae5p40","created":1609146150407,"text":"异步处理和解耦。如注册用户发邮件验证，\n提交MQ由业务模块消费，同时将两个模块解耦"},"children":[]},{"data":{"id":"c84aqo2d3j40","created":1609146254407,"text":"日志采集，常用 kafka"},"children":[]},{"data":{"id":"c84aqydxkw00","created":1609146276874,"text":"消息通讯。点对点或发布/订阅模式。"},"children":[]}]},{"data":{"id":"c82m8llr5480","created":1608975571900,"text":"带来的问题"},"children":[{"data":{"id":"c82m8q8a6rk0","created":1608975581969,"text":"系统可用性降低，挂掉影响其他系统"},"children":[]},{"data":{"id":"c82m9b769pc0","created":1608975627614,"text":"系统复杂度变高，须考虑消息丢失和重复消费问题"},"children":[]},{"data":{"id":"c82m9ydevwo0","created":1608975678058,"text":"一致性问题，多个系统消费有的成功有的失败问题"},"children":[]}]},{"data":{"id":"c836re1yi800","created":1609033466582,"text":"高可用方法"},"children":[{"data":{"id":"c836rtr0bew0","created":1609033500749,"text":"RabbitMQ 镜像集群，多节点复制 queue 节点信息"},"children":[]},{"data":{"id":"c84as4ko1nk0","created":1609146368706,"text":"ActiveMQ 部署主从热备"},"children":[]},{"data":{"id":"c84asgatm2w0","created":1609146394232,"text":"RocketMQ 有多 master 多 slave 异步复制模式和\n多 master 多 slave 同步双写模式支持集群部署模式"},"children":[]}]},{"data":{"id":"c82m7hfhdd40","created":1608975484450,"text":"问题"},"children":[{"data":{"id":"c82m7jhzoxc0","created":1608975488954,"text":"确保消息不丢失"},"children":[{"data":{"id":"c836sl8uxy80","created":1609033560601,"text":"生产者：使用确认或事务机制。\n如 RabbitMQ 的事务模式和 confirm 模式"},"children":[]},{"data":{"id":"c836t2bbzqg0","created":1609033597756,"text":"MQ内部出错、宕机等情况。 开启MQ持久化配置"},"children":[]},{"data":{"id":"c836toi1r340","created":1609033646052,"text":"消费者 一般默认是自动确认模式，防止消费者取到消息挂掉了，\n改为使用手动确认模式"},"children":[]}]},{"data":{"id":"c836u3mppdk0","created":1609033678985,"text":"避免重复消费"},"children":[{"data":{"id":"c836ubportk0","created":1609033696579,"text":"给消息生成全局唯一id（可用Redis），消费成功的可丢弃"},"children":[]},{"data":{"id":"c836ux1jvf40","created":1609033743009,"text":"消息带上数据库唯一字段数据，避免重复插入"},"children":[]}]},{"data":{"id":"c836wbmgt4g0","created":1609033853113,"text":"消息挤压如何处理"},"children":[{"data":{"id":"c836wjxm2w00","created":1609033871201,"text":"扩容，启用多个消费者，并发接收消息，持久化后再处理，\n或者直接丢弃消息，回头让生产者重新生产"},"children":[]},{"data":{"id":"c836wy4dnwg0","created":1609033902085,"text":"若短时间无法扩容，将系统降级，减少发送的数据量"},"children":[]},{"data":{"id":"c836x4nn0gw0","created":1609033916311,"text":"监控发现，若生产消费速度没什么变化，但消息挤压，\n检查是否有消费失败反复消费情况"},"children":[]},{"data":{"id":"c84jdbik4m80","created":1609170598343,"text":"监控发现，消费消息速度慢，检查消费实例是否有消费\n错误，是否有死锁或资源堵塞"},"children":[]}]}]},{"data":{"id":"c839saf7oxk0","created":1609042000371,"text":"如何保证消费顺序"},"children":[{"data":{"id":"c839sekcwy80","created":1609042009389,"text":"生产者保证消息入队的顺序"},"children":[]},{"data":{"id":"c84j568917c0","created":1609169959923,"text":"MQ 本身是一种先进先出的数据接口，将同一类信息，\n发送到同一个 queue 中，保证出队是有序的"},"children":[]},{"data":{"id":"c84j6a3z2o00","created":1609170046735,"text":"避免多消费者并发消费同一个 queue 中的消息，\n最好一个消费者对应一个 queue"},"children":[]}]}]},{"data":{"id":"c869ixjozxc0","created":1609345946936,"text":"Elasticsearch"},"children":[{"data":{"id":"c869jfpfev40","created":1609345986465,"text":"与关系型数据库区别"},"children":[{"data":{"id":"c869jl6u9l40","created":1609345998402,"text":"关系型数据库：数据库 => 表 => 行 => 列"},"children":[]},{"data":{"id":"c869jstyn480","created":1609346015037,"text":"Elasticsearch：索引 => 类型 => 文档 => 字段"},"children":[]}]},{"data":{"id":"c869lju4ddk0","created":1609346152184,"text":"分布式search"},"children":[{"data":{"id":"c869lnb5nuw0","created":1609346159744,"text":"查询流程分为query和fetch两个阶段"},"children":[]},{"data":{"id":"c869lqs6d6w0","created":1609346167304,"text":"查询和计算权重得分在Lucene完成，聚合是在ES中实现的"},"children":[]}]}]}]},{"data":{"id":"c81yzg30p200","created":1608909969078,"text":"微服务 ","progress":1,"layout":null,"expandState":"expand"},"children":[{"data":{"id":"c820x84qsco0","created":1608915437259,"text":"好处"},"children":[{"data":{"id":"c82uk43akow0","created":1608999043027,"text":"针对特定服务发布，影响小，风险小，成本低"},"children":[]},{"data":{"id":"c82uk59mlu80","created":1608999045587,"text":"频繁发布版本，快速交付需求"},"children":[]},{"data":{"id":"c82uk9zszfk0","created":1608999055877,"text":"低成本扩容，弹性伸缩，适应云环境"},"children":[]}]},{"data":{"id":"c820xcfhk680","created":1608915446616,"text":"坏处"},"children":[{"data":{"id":"c82ukpemjqo0","created":1608999089425,"text":"分布式系统比较复杂"},"children":[]},{"data":{"id":"c82ul4s7jrk0","created":1608999122898,"text":"部署，测试和监控的成本高"},"children":[]},{"data":{"id":"c82ul8jh49s0","created":1608999131077,"text":"有分布式事务和CAP的相关问题"},"children":[]}]},{"data":{"id":"c8210lc4ehs0","created":1608915701096,"text":"Spring Cloud"},"children":[{"data":{"id":"c8210r40s200","created":1608915713667,"text":"常用组件"},"children":[{"data":{"id":"c8210w8pg2g0","created":1608915724834,"text":"注册中心"},"children":[{"data":{"id":"c82uf348lco0","created":1608998649087,"text":"Eureka"},"children":[]},{"data":{"id":"c82ufd2n11k0","created":1608998670758,"text":"Zookeeper"},"children":[]},{"data":{"id":"c82ufj5yaa80","created":1608998684019,"text":"Consul"},"children":[]},{"data":{"id":"c82ugkfijg00","created":1608998765138,"text":"Nacos"},"children":[]}]},{"data":{"id":"c8211344vw80","created":1608915739795,"text":"配置中心 Spring Config"},"children":[{"data":{"id":"c8bd28xqibk0","created":1609863723762,"text":"git webhook 事件处理，调用配置链接通知配置中心"},"children":[]},{"data":{"id":"c8bd98uojsw0","created":1609864272126,"text":"配置中心发送消息到 mq，mq下发消息到各个服务"},"children":[]},{"data":{"id":"c8bda5a7t3s0","created":1609864342723,"text":"各个服务更新修改后的配置"},"children":[]}]},{"data":{"id":"c8211dx4lsw0","created":1608915763316,"text":"网关"},"children":[{"data":{"id":"c82uh2artcw0","created":1608998804034,"text":"Spring Gateway"},"children":[]},{"data":{"id":"c82uhp708a00","created":1608998853872,"text":"Zuul"},"children":[]}]},{"data":{"id":"c8211fwt2400","created":1608915767650,"text":"客户端负载均衡 Ribbon","note":"默认使用算法是lun'xu"},"children":[]},{"data":{"id":"c821217ev8g0","created":1608915814004,"text":"断路器 Hystrix"},"children":[]},{"data":{"id":"c8212ac19740","created":1608915833874,"text":"RPC 客户端 Feign","note":"涉及的涉及模式有哪些，是如何实现d"},"children":[{"data":{"id":"c8bdal9qdlk0","created":1609864377522,"text":"动态代理模式"},"children":[]}]}]}]},{"data":{"id":"c82naepyc3k0","created":1608978534754,"text":"限流方法（流量控制、熔断降级、系统负载保护）","expandState":"expand"},"children":[{"data":{"id":"c84jjprosbk0","created":1609171099555,"text":"Hystrix 熔断策略基于异常比率；\n限流基于  QPS，支持基于调用关系的限流"},"children":[]},{"data":{"id":"c82nahld1d40","created":1608978541007,"text":"sentinel  熔断策略基于响应时间、异常比率、异常数；\n限流支持有限（并发线程数或信号量大小）"},"children":[]},{"data":{"id":"c82nan6hddk0","created":1608978553168,"text":"Redis + Lua 脚本"},"children":[{"data":{"id":"c84jx9e8sm00","created":1609172161012,"text":"判断 key 是否存在，若不存在设置 key 过期时间和对应 value 为1；\n若存在判断在过期时间内 key 对应的 value 值是否大于限制数量；\n大于返回 false；\n小于自增加2并返回 true。"},"children":[]}]}]},{"data":{"id":"c84jjbef5340","created":1609171068278,"text":"限流算法","expandState":"expand"},"children":[{"data":{"id":"c82unjh1diw0","created":1608999311603,"text":"计数器"},"children":[]},{"data":{"id":"c82unl2emw00","created":1608999315071,"text":"滑动窗口（Sentinel）"},"children":[]},{"data":{"id":"c82unqfd3w00","created":1608999326739,"text":"漏桶（Java 线程池）"},"children":[]},{"data":{"id":"c82uo2qcggw0","created":1608999353524,"text":"令牌桶（Guava RateLimiter）"},"children":[]}]},{"data":{"id":"c82umtp4pfc0","created":1608999255496,"text":"负载均衡算法"},"children":[{"data":{"id":"c82uofcbl0g0","created":1608999380974,"text":"随机"},"children":[]},{"data":{"id":"c82uoh76awo0","created":1608999385017,"text":"轮询"},"children":[]},{"data":{"id":"c82uom9x15c0","created":1608999396067,"text":"加权响应：响应时间短的权重就大"},"children":[]}]},{"data":{"id":"c83g64msyhs0","created":1609060011527,"text":"分布式锁"},"children":[{"data":{"id":"c83g6gxb2bs0","created":1609060038283,"text":"数据库级别：读频繁用客观锁，写频繁用悲观锁"},"children":[{"data":{"id":"c83g6k10pls0","created":1609060045038,"text":"乐观锁：基于版本号实现"},"children":[]},{"data":{"id":"c83g6w2vkjk0","created":1609060071272,"text":"悲观锁：基于数据库级别的for update"},"children":[]}]},{"data":{"id":"c83g7u72d540","created":1609060145536,"text":"基于 Redis 原子性操作"},"children":[{"data":{"id":"c83g83tbfy80","created":1609060166473,"text":"基于 setnx 和 expire 实现"},"children":[]}]},{"data":{"id":"c83g8o1fi740","created":1609060210498,"text":"基于 Rdisson 框架实现"},"children":[]},{"data":{"id":"c83g8usnveo0","created":1609060225206,"text":"基于 Zookeeper 实现"},"children":[{"data":{"id":"c83g94z9qi80","created":1609060247373,"text":"基于 InterprocessMutex 实现"},"children":[]}]}]},{"data":{"id":"c82uovk5ba80","created":1608999416276,"text":"分布式事务","note":"分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。","expandState":"expand"},"children":[{"data":{"id":"c84y6bt0i280","created":1609212367075,"text":"CAP理论：一致性、可用性和分区容错在分布式事务中不可兼得。"},"children":[{"data":{"id":"c84y6j64d740","created":1609212383105,"text":"一致性（Consistency）"},"children":[]},{"data":{"id":"c84y6l5dshk0","created":1609212387414,"text":"可用性（Availability）"},"children":[]},{"data":{"id":"c84y6mtr1y80","created":1609212391064,"text":"分区容错性（Partition tolerance）"},"children":[]}]},{"data":{"id":"c84ybjr2olk0","created":1609212776192,"text":"BASE 理论"},"children":[{"data":{"id":"c84ybsaxewo0","created":1609212794807,"text":"Basically Available（基本可用）"},"children":[]},{"data":{"id":"c84ybvtky340","created":1609212802465,"text":"Soft state（软状态）"},"children":[]},{"data":{"id":"c84ybxvkbbs0","created":1609212806939,"text":"Eventually consistent（最终一致性）"},"children":[]}]},{"data":{"id":"c8532cpqavc0","created":1609226161146,"text":"常见解决方案"},"children":[{"data":{"id":"c85dzeviprk0","created":1609256962966,"text":"基于 XA 协议的 2PC（两段提交） 和 3PC"},"children":[{"data":{"id":"c85ec86ni1k0","created":1609257967136,"text":"Seata 常用模式"},"children":[]}]},{"data":{"id":"c85e2hazie00","created":1609257203347,"text":"基于业务层的 TCC"},"children":[{"data":{"id":"c85eb09moko0","created":1609257871537,"text":"Try Confirm Cancel 三阶段，代码实现复杂度相对较高"},"children":[]}]},{"data":{"id":"c85e3mmzcsg0","created":1609257293321,"text":"应用消息队列 + 本地消息表实现的最终一致性方案"},"children":[{"data":{"id":"c85e4ocxj8w0","created":1609257375431,"text":"目前市面上支持该方案的 mq 只有阿里的 rocketmq，\n单消息队列可用于："},"children":[{"data":{"id":"c85e5hcfa000","created":1609257438527,"text":"用户注册成功后发送邮件"},"children":[]},{"data":{"id":"c85e5kos5og0","created":1609257445804,"text":"电商系统给用户发送优惠券"},"children":[]}]},{"data":{"id":"c85e5tg9caw0","created":1609257464880,"text":"跨行转账可通过该方案实现"},"children":[]}]},{"data":{"id":"c85e3xi58qo0","created":1609257316973,"text":"最大努力通知"},"children":[{"data":{"id":"c85e49ys6y80","created":1609257344100,"text":"例如支付回调和其他一些回调通知"},"children":[]}]}]},{"data":{"id":"c84kb7fsvjc0","created":1609173253851,"text":"框架"},"children":[{"data":{"id":"c84kb8v89oo0","created":1609173256960,"text":"Seata：提供 AT、TCC、SAGA 和 XA 事务模式"},"children":[]},{"data":{"id":"c84kbgqv2ww0","created":1609173274111,"text":"TX-LCN：提供LCN（2pc）、TCC、TXC 三种事务模式"},"children":[]},{"data":{"id":"c84kco4dans0","created":1609173368529,"text":"Raincat "},"children":[]}]},{"data":{"id":"c84kedkymcg0","created":1609173502316,"text":"Seata 4种事务模式","note":"常见分布式事务解决方案\n1、seata 阿里分布式事务框架\n2、消息队列\n3、saga\n4、XA\n他们有一个共同点，都是“两阶段”。“两阶段”是指完成整个分布式事务，划分成两个步骤完成。\n\n实际上，这四种常见的分布式事务解决方案，分别对应着分布式事务的四种模式：AT、TCC、Saga、XA；\n\n四种分布式事务模式，都有各自的理论基础，分别在不同的时间被提出；每种模式都有它的适用场景，同样每个模式也都诞生有各自的代表产品；而这些代表产品，可能就是我们常见的(全局事务、基于可靠消息、最大努力通知、TCC)。\n\n（AT、TCC、Saga、XA）模式分析\n四种分布式事务模式，分别在不同的时间被提出，每种模式都有它的适用场景\n\n- AT 模式是无侵入的分布式事务解决方案，适用于不希望对业务进行改造的场景，几乎0学习成本。\n- TCC 模式是高性能分布式事务解决方案，适用于核心系统等对性能有很高要求的场景。\n- Saga 模式是长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统，Saga 模式一阶段就会提交本地事务，无锁，长流程情况下可以保证性能，多用于渠道层、集成层业务系统。事务参与者可能是其它公司的服务或者是遗留系统的服务，无法进行改造和提供 TCC 要求的接口，也可以使用 Saga 模式。\n- XA模式是分布式强一致性的解决方案，但性能低而使用较少。\n\n作者：消失er\n链接：https://www.jianshu.com/p/75217db81c99\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"},"children":[{"data":{"id":"c84kilb2ups0","created":1609173832589,"text":"AT：AT模式是一种无侵入的分布式事务解决方案。\n阿里seata框架，实现了该模式。"},"children":[]},{"data":{"id":"c84kivohm000","created":1609173855168,"text":"TCC：TCC 模式需要用户根据自己的业务场景实现 Try、Confirm 和 Cancel 三个操作；\n事务发起方在一阶段执行 Try 方式，在二阶段提交执行 Confirm 方法，二阶段回滚执行 Cancel 方法。"},"children":[]},{"data":{"id":"c84kj0hmxqo0","created":1609173865638,"text":"Saga：Saga 模式适用于业务流程长且需要保证事务最终一致性的业务系统，\nSaga 模式一阶段就会提交本地事务，无锁、长流程情况下可以保证性能。"},"children":[]},{"data":{"id":"c84u8k7a4pc0","created":1609201257640,"text":"XA：XA是X/Open DTP组织（X/Open DTP group）定义的两阶段提交协议。\nX/Open DTP模型（1994）包括应用程序（AP）、事务管理器（TM）、资源管理器（RM）。"},"children":[]}]}]},{"data":{"id":"c8epjgp3b680","created":1610203606033,"text":"分支主题"},"children":[]},{"data":{"id":"c84502o49b40","created":1609130064815,"text":"链路追踪","note":"sleuth: 为我们生成了请求链路信息，虽然我们已经可以通过Trace ID来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助zipkin来代替我们完成日志获取与分析。\n\nzipkin: 主要有四个组件，可以帮助我们收集由sleuth产生的请求链路信息，并保存到MySQL或者Elasticsearch中，并通过web页面分析与跟踪请求日志。这里提一句：最新版本的zipkin还不支持6.0.0以上版本的Elasticsearch。\n\nCollector：收集器，负责收集日志信息，以供后续的存储，分析与展示；\nStorage：存储模块，我们可以通过它将日志存储到MySQL或者Elasticsearch中。\nRESTful API：API组件，它主要用来提供外部访问接口。 比如给客户端展示跟踪信息，或是外接系统访问以实现监控等；\nWEB UI：通过web页面，我们可以轻松的分析与跟踪请求日志。"},"children":[{"data":{"id":"c85fsjtxczk0","created":1609262067424,"text":"Spring Cloud Sleuth"},"children":[]},{"data":{"id":"c84506yhmqo0","created":1609130074150,"text":"ZipKin"},"children":[]}]},{"data":{"id":"c84kf3sraso0","created":1609173559384,"text":"分布式 id 生成方式"},"children":[{"data":{"id":"c84kf99smm80","created":1609173571298,"text":"UUID"},"children":[]},{"data":{"id":"c84kfel7vxc0","created":1609173582872,"text":"数据库自增 ID"},"children":[]},{"data":{"id":"c84kfp57bzk0","created":1609173605849,"text":"数据库多主模式"},"children":[]},{"data":{"id":"c84kg2nc78g0","created":1609173635243,"text":"号段模式"},"children":[]},{"data":{"id":"c84kg500k1k0","created":1609173640364,"text":"Redis"},"children":[]},{"data":{"id":"c84kg7xkf740","created":1609173646746,"text":"雪花算法"},"children":[]}]}]},{"data":{"id":"c820u9bfy740","created":1608915204748,"text":"数据库","progress":1},"children":[{"data":{"id":"c820xo4foeo0","created":1608915472069,"text":"数据库三范式","note":"- 列不可分，确保表的每一列都是不可分割的原子数据项。作用：方便字段的维护、查询效率高、易于统计。\n- 属性字段完全依赖（完全依赖指不能存在仅依赖主键的部分属性）于主键。作用：保证每行数据都是按主键划分的独立数据。\n- 任何非主属性字段不依赖于其它非主属性字段。作用：减少表字段与数据存储，让相互依赖的非主键字段单独成为一张关系表，记录被依赖字段即可。\n\n三大范式只是一般设计数据库的基本理念，可以设计冗余较小、存储查询效率高的表结构。\n\n但不能一味的去追求数据库设计范式，数据库设计应多关注需求和性能，重要程度：需求 - 性能 - 表结构。比如有时候添加一个冗余的字段可以大大提高查询性能。"},"children":[{"data":{"id":"c8669p00wvs0","created":1609336759726,"text":"列不可分，确保表的每一列都是不可分割的原子数据项"},"children":[]},{"data":{"id":"c8669pux5l40","created":1609336761593,"text":"属性字段完全依赖（完全依赖指不能存在仅依赖主键的部分属性）于主键"},"children":[]},{"data":{"id":"c866gx9dwmw0","created":1609337326255,"text":"任何非主属性字段不依赖于其它非主属性字段"},"children":[]}]},{"data":{"id":"c866hcqa8kw0","created":1609337359928,"text":"五大约束"},"children":[{"data":{"id":"c866hkqi6x40","created":1609337377356,"text":"主键约束：唯一，非空"},"children":[]},{"data":{"id":"c866hn2l7ls0","created":1609337382440,"text":"唯一约束：唯一，可为空，但也只能有一个"},"children":[]},{"data":{"id":"c866israzm00","created":1609337473183,"text":"默认约束"},"children":[]},{"data":{"id":"c866iv20r5c0","created":1609337478184,"text":"外键约束"},"children":[]},{"data":{"id":"c866ixbwdfs0","created":1609337483135,"text":"非空约束"},"children":[]}]},{"data":{"id":"c820xu26p0g0","created":1608915484994,"text":"ACID  原则，事务的四个特性","note":"事务的四大特性\n事务具备ACID四种特性，ACID是Atomic（原子性）、Consistency（一致性）、Isolation（隔离性）和Durability（持久性）的英文缩写。\n\n- 原子性（Atomicity）\n\t事务最基本的操作单元，要么全部成功，要么全部失败，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。\n\n- 一致性（Consistency）\n\t事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。\n\n- 隔离性（Isolation）\n\t指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。\n\n- 持久性（Durability）\n\t指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。\n    \n    \n简单点的说法\n- 原子性(atomicity)：一个事务要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作（只管成功与否，不管是否正确）；\n- 一致性(consistency)：确保了任何事务都会使数据库从一种合法的状态变为另一种合法的状态（数据库各种约束规则起作用，代码自己实现保证符合逻辑，比如转账不能超出余额）；\n- 隔离性(isolation)：并发环境下，每个事务都有各自完整的数据空间，修改隔离，数据要么是修改前的状态，要么是修改后的状态，不能是中间的状态。\n- 持久性(durability)：事务成功，对数据库的操作必须永久保存下来，必须生效。即使系统奔溃，能恢复到事物成功后的状态。"},"children":[{"data":{"id":"c821510xinc0","created":1608916048704,"text":"原子性"},"children":[]},{"data":{"id":"c82156ebpuo0","created":1608916060398,"text":"一致性"},"children":[]},{"data":{"id":"c8215hxoylc0","created":1608916085514,"text":"隔离性"},"children":[]},{"data":{"id":"c8215ndj8qw0","created":1608916097356,"text":"持久性"},"children":[]}]},{"data":{"id":"c820xy88ao00","created":1608915494066,"text":"事务隔离级别","note":"- 读未提交：另一个事务能看到这个事务未提交的数据。脏读、幻读、不可重复读；\n- 读提交：事务提交后才能被另一个事务读到。避免了脏读。大多数数据库模式隔离级别；\n- 可重复读：保证一个事务不能被另外一个事务读取未提交的数据之外，还避免了不可重复读，但不能避免幻读，比如第二次会读到新增的行（MySQL默认隔离级别，幻读使用mvvc版本并发控制解决了）；\n- 序列化：事务顺序执行，最高隔离级别。"},"children":[{"data":{"id":"c8213ttdpkw0","created":1608915954646,"text":"读未提交"},"children":[]},{"data":{"id":"c82144kn9v40","created":1608915978063,"text":"读已提交"},"children":[]},{"data":{"id":"c8214848sbs0","created":1608915985778,"text":"可重复读"},"children":[]},{"data":{"id":"c8214pnm6w80","created":1608916023955,"text":"串行化（序列化）"},"children":[]}]},{"data":{"id":"c820y6phwg80","created":1608915512525,"text":"事务传播机制","note":"- REQUIRED 如果当前方法没有事务则加入事务,没有则创建一个事务（**Spring默认的事务传播类型**）\n- NOT_SUPPORTED 不支持事务,如果当前有事务则挂起事务运行\n- REQUIREDS_NEW 新建一个事务并在这个事务中运行,如果当前存在事务就把当前事务挂起,新建的 事务的提交与回滚一挂起事务没有联系,不会影响挂起事务的操作\n- MANDATORY 强制当前方法使用事务运行,如果当前没有事务则抛出异常\n- NEVER 当前方法不能存在事务,即非事务运行,如果存在事务则抛出异常\n- SUPPORTS 支持当前事务,如果当前没事务也支持非事务状态运行\n- NESTED 如果当前存在事务,则在嵌套事务内执行,嵌套事务的提交与回滚与父事务没有任务关系,反之,当父事务提交嵌套事务也一起提交,父事务回滚会也回滚嵌套事务的,如果当前没有事务,则新建一个事务运行."},"children":[{"data":{"id":"c86652vvr540","created":1609336398129,"text":"REQUIRED 如果当前方法没有事务则加入事务,没有则创建一个事务\n（Spring默认的事务传播类型）"},"children":[]},{"data":{"id":"c8665igjc2o0","created":1609336432030,"text":"NOT_SUPPORTED 不支持事务,如果当前有事务则挂起事务运行"},"children":[]},{"data":{"id":"c8667rzk2b40","created":1609336609499,"text":"REQUIREDS_NEW 新建一个事务并在这个事务中运行,\n如果当前存在事务就把当前事务挂起"},"children":[]},{"data":{"id":"c8665ye2ifs0","created":1609336466709,"text":"MANDATORY 强制当前方法使用事务运行,如果当前没有事务则抛出异常"},"children":[]},{"data":{"id":"c86680ihlpc0","created":1609336628058,"text":"NEVER 当前方法不能存在事务,即非事务运行,如果存在事务则抛出异常"},"children":[]},{"data":{"id":"c86683ul4i80","created":1609336635320,"text":"SUPPORTS 支持当前事务,如果当前没事务也支持非事务状态运行"},"children":[]},{"data":{"id":"c866865cq1k0","created":1609336640324,"text":"NESTED 如果当前存在事务,则在嵌套事务内执行"},"children":[]}]},{"data":{"id":"c820yh8nas80","created":1608915535450,"text":"聚簇索引和非聚簇索引","note":"- 索引与行记录是分开存储的，叫做非聚簇索引。比如 MyISAM 索引都是非聚簇索引，其主键索引与普通索引没有本质差异；\n- 聚簇索引，有且只能够有一个，因为数据行在物理磁盘上只能有一份聚集存储。InnoDB 主键索引与行记录是存储在一起的，没有主键索引，则会使用unique索引，没有unique索引，则会使用数据库内部的一个行的id来当作主键索引。\n\n延迟关联应用场景有关"},"children":[{"data":{"id":"c866q39nv5s0","created":1609338044610,"text":"聚簇索引：将数据存储与索引放到了一块，数据实际上存放在索引的叶子节点上，\n一个表只能有一个聚簇索引"},"children":[]},{"data":{"id":"c866r3gn25c0","created":1609338123396,"text":"非聚簇索引：数据存储与索引分开，索引结构的叶子节点指向了数据的对应行"},"children":[]}]},{"data":{"id":"c820yul2erc0","created":1608915564499,"text":"B树和B+树区别"},"children":[{"data":{"id":"c869g5ujvz40","created":1609345729914,"text":"B-树"},"children":[{"data":{"id":"c869gg7h8t40","created":1609345752464,"text":"所有键值分布在整颗树中（索引值和具体data都在每个节点里）"},"children":[]},{"data":{"id":"c869gkv4v1s0","created":1609345762601,"text":"任何一个关键字出现且只出现在一个结点中"},"children":[]},{"data":{"id":"c869gy7a0340","created":1609345791634,"text":" 搜索有可能在非叶子结点结束\n（最好情况O(1)就能找到数据，找到自然就结束了，不需要一直到叶子结点）；"},"children":[]},{"data":{"id":"c869hrsu78g0","created":1609345856064,"text":"在关键字全集内做一次查找,性能逼近二分查找"},"children":[]}]},{"data":{"id":"c869ga36t8g0","created":1609345739144,"text":"B+树"},"children":[{"data":{"id":"c869hyxf0lk0","created":1609345871578,"text":" 所有关键字存储在叶子节点出现,内部节点(非叶子节点)并不存储真正的 data"},"children":[]},{"data":{"id":"c869i1ocwls0","created":1609345877561,"text":" 为所有叶子结点增加了一个链指针"},"children":[]}]}]},{"data":{"id":"c872mgxfbww0","created":1609428036405,"text":"哈希索引和B+树索引区别"},"children":[{"data":{"id":"c872myaq4740","created":1609428074214,"text":"B+树是一个平衡的多叉树，从根节点到叶子节点逐级查找"},"children":[]},{"data":{"id":"c872n0nzhxs0","created":1609428079370,"text":"哈希索引是采用一定的哈希算法，把键值换算成新的哈希值，\n只需一次哈希算法即可立刻定位到相应的位置"},"children":[]},{"data":{"id":"c872ok7rc7k0","created":1609428200288,"text":"如果是等值查询，那么哈希索引明显有绝对优势"},"children":[]},{"data":{"id":"c872opoz44o0","created":1609428212213,"text":"如果是范围查询检索，哈希索引也没办法利用索引完成排序"},"children":[]},{"data":{"id":"c872p7yq57k0","created":1609428251985,"text":"大多数场景下，都会有范围查询、排序、分组等查询特征，用B+树索引就可以了"},"children":[]}]},{"data":{"id":"c820z3dke3k0","created":1608915583637,"text":"explain 执行计划"},"children":[{"data":{"id":"c820za8oa0w0","created":1608915598579,"text":"作用"},"children":[{"data":{"id":"c872r9mivuo0","created":1609428412329,"text":"表加载顺序"},"children":[]},{"data":{"id":"c872reyz1mo0","created":1609428423966,"text":"sql 查询类型"},"children":[]},{"data":{"id":"c872rm67gjc0","created":1609428439641,"text":"分析索引应用"},"children":[]},{"data":{"id":"c872s9f1rs00","created":1609428490241,"text":"多少行被优化器查询"},"children":[]}]},{"data":{"id":"c820zkr15pc0","created":1608915621456,"text":"包括"},"children":[{"data":{"id":"c872sui7t340","created":1609428536145,"text":"id：查询优先级，越大优先级越高，相同时有优化器决定"},"children":[]},{"data":{"id":"c872ukp7rmo0","created":1609428671529,"text":"select_type：查询类型，如普通查询、联合查询和子查询"},"children":[{"data":{"id":"c872vnylzc00","created":1609428756992,"text":"SIMPLE：普通类型"},"children":[]},{"data":{"id":"c872vylqjvs0","created":1609428780158,"text":"PRIMARY：查询语句包含任何子部分，最外层查询就被标记为 PRIMARY"},"children":[]},{"data":{"id":"c872y5f27j40","created":1609428951720,"text":"SUBQUERY：当 select 或 where 包含了子查询，该子查询被标记为SUBQUERY"},"children":[]},{"data":{"id":"c872yjcw7io0","created":1609428982064,"text":"DERIVED：包含在 from 子句中的子查询就会被标记为 DERIVED"},"children":[]},{"data":{"id":"c8730zoavc80","created":1609429174310,"text":"UNION：若第二个SELECT出现在UNION之后，则被标记为UNION"},"children":[]},{"data":{"id":"c87312bkqyg0","created":1609429180071,"text":"UNION RESULT：从UNION表获取结果的SELEC"},"children":[]}]},{"data":{"id":"c8731ayniow0","created":1609429198881,"text":"talbe：表名，不一定是真实存在的表，有别名显示别名，也有可能是临时表"},"children":[]},{"data":{"id":"c8732r1ww080","created":1609429312271,"text":"partitions：查询匹配到的分区信息，对于非分区表值为 null，\n当查询分区表时，partitions 显示分区表命中的分区情况"},"children":[]},{"data":{"id":"c8734y3r8ps0","created":1609429484348,"text":"type：查询使用的类型，性能从好到坏是 system > const > eq_ref > ref > ref_or_null > \nindex_merge > unique_subquery > index_subquery > range > index > ALL"},"children":[{"data":{"id":"c8738q01hjk0","created":1609429780166,"text":"null：不需要访问任何表和索引，直接返回结果"},"children":[]},{"data":{"id":"c8736mmat2g0","created":1609429616076,"text":"const/system：单条记录，系统会把匹配行中的其他列作为常数处理，如主键或唯一索引查询"},"children":[]},{"data":{"id":"c87376shw800","created":1609429659987,"text":"eq_ref：常出现于关联查询，使用主键或唯一索引"},"children":[]},{"data":{"id":"c873d8kjho00","created":1609430134044,"text":"ref：区别于 eq_ref ，表示使用非唯一性索引，可能会找到多个符合条件的行"},"children":[]},{"data":{"id":"c873hss5mz40","created":1609430491497,"text":"ref_or_null：类似于 ref ，区别是会额外搜索包含 NULL 的行"},"children":[]},{"data":{"id":"c873japnrmo0","created":1609430608892,"text":"index_merge：使用了索引合并优化方法，查询使用了两个以上的索引"},"children":[]},{"data":{"id":"c873jivxo4g0","created":1609430626686,"text":"unique_subquery：替换了形式value IN (SELECT primary_key FROM X)的IN子查询的ref"},"children":[]},{"data":{"id":"c873klfhleo0","created":1609430710586,"text":"index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值"},"children":[]},{"data":{"id":"c873l0g1qhs0","created":1609430743271,"text":"range：只检索给定范围的行，使用一个索引来选择行"},"children":[]},{"data":{"id":"c873lx0x3xs0","created":1609430814190,"text":"index：Index 与ALL 其实都是读全表，区别在于index是遍历索引树读取，而ALL是从硬盘中读取"},"children":[]},{"data":{"id":"c873m2meh880","created":1609430826373,"text":"ALL：将遍历全表以找到匹配的行，性能最差"},"children":[]}]},{"data":{"id":"c873q8j0us00","created":1609431152686,"text":"ref：常见的有const，func，null，字段名","note":"当使用常量等值查询，显示const，\n当关联查询时，会显示相应关联表的关联字段\n如果查询条件使用了表达式、函数，或者条件列发生内部隐式转换，可能显示为func\n其他情况null"},"children":[]},{"data":{"id":"c873qqdgq8g0","created":1609431191532,"text":"rows：表的统计信息和索引使用情况，估算要找到我们所需的记录，需要读取的行数"},"children":[]},{"data":{"id":"c873r3uimig0","created":1609431220862,"text":"filtered：百分比的值，表里符合条件的记录数的百分比。\n简单点说，这个字段表示存储引擎返回的数据在经过过滤后，剩下满足条件的记录数量的比例"},"children":[]},{"data":{"id":"c873rsv8s8g0","created":1609431275325,"text":"Extra：不适合在其他列中显示的信息，Explain 中的很多额外的信息会在 Extra 字段显示"},"children":[]}]},{"data":{"id":"c872r692bf40","created":1609428404985,"text":"数据库优化"},"children":[{"data":{"id":"c873mhau55c0","created":1609430858326,"text":"服务器优化"},"children":[{"data":{"id":"c873mw0uvow0","created":1609430890374,"text":"调整查询缓存配置参数，可调大到内存80%"},"children":[]},{"data":{"id":"c873nhi292g0","created":1609430937127,"text":"开启 sql 慢查询日志"},"children":[]}]},{"data":{"id":"c873mnr5rrk0","created":1609430872373,"text":"sql 优化"},"children":[{"data":{"id":"c873o1bbp0g0","created":1609430980255,"text":"尽量只查必要的字段，而不是使用 select *"},"children":[]},{"data":{"id":"c873ohcofw00","created":1609431015165,"text":"注意索引的使用，失效或者查询数据量大"},"children":[]},{"data":{"id":"c873pmk4h000","created":1609431104864,"text":"大表 join 小表"},"children":[]}]}]}]},{"data":{"id":"c8ai5t674gw0","created":1609776548494,"text":"MyISAM 和 InnoDB区别"},"children":[{"data":{"id":"c8ai6wowqf40","created":1609776634520,"text":"MyISAM 是非事务安全的，InnoDB 是事务安全的"},"children":[]},{"data":{"id":"c8ai7lx4rew0","created":1609776689437,"text":"MyISAM 锁粒度是表级的，而 InnoDB 支持行级锁"},"children":[]},{"data":{"id":"c8ai8czrh680","created":1609776748369,"text":"MyISAM 支持全文索引，而 InnoDB 不支持"},"children":[]},{"data":{"id":"c8ai9835z800","created":1609776816055,"text":"MyISAM 相对简单，效率上由于 InnoDB，如果应用执行大量 select 操作适合使用"},"children":[]},{"data":{"id":"c8aib7j4hmw0","created":1609776971572,"text":"InnoDB 支持事务管理，具备 ACID 事务特性，如果应用需要大量 insert 和 update 操作适合使用"},"children":[]}]}]},{"data":{"id":"c820uefkxio0","created":1608915215883,"text":"开放问题","progress":1},"children":[{"data":{"id":"c8215u9ru2o0","created":1608916112366,"text":"如何理解高并发"},"children":[{"data":{"id":"c8aj9uslv680","created":1609779686593,"text":"并发与并行"},"children":[{"data":{"id":"c8aj9xkqj740","created":1609779692647,"text":"并行：系统可以同时处理多个任务。同时进行，不抢占 cpu，不需要线程切换"},"children":[]},{"data":{"id":"c8aja93y6jk0","created":1609779717754,"text":"并发：系统在一段时间内可以处理多个任务。短时间内 cpu 交替执行，处理多个任务"},"children":[]}]},{"data":{"id":"c8ajd3d682g0","created":1609779940343,"text":"提高并发能力"},"children":[{"data":{"id":"c8ajd7o0v3c0","created":1609779949706,"text":"水平扩展"},"children":[{"data":{"id":"c8ajdgj1j3k0","created":1609779968996,"text":"分布式，增加服务器数量"},"children":[]},{"data":{"id":"c8ajfjcp43k0","created":1609780131871,"text":"实践"},"children":[{"data":{"id":"c8ajfq8ew480","created":1609780146850,"text":"反向代理层使用 DNS 轮询进行水平扩展"},"children":[]},{"data":{"id":"c8ajga954eg0","created":1609780190429,"text":"站点使用 nginx 进行水平扩展"},"children":[]},{"data":{"id":"c8ajhxjy37c0","created":1609780319513,"text":"服务层使用服务连接池进行水平扩展"},"children":[]},{"data":{"id":"c8ajid1btpc0","created":1609780353216,"text":"数据库使用哈希的方式进行水平扩展"},"children":[]}]}]},{"data":{"id":"c8ajddqbytk0","created":1609779962907,"text":"垂直扩展"},"children":[{"data":{"id":"c8ajddtjwo00","created":1609779963101,"text":"增强单机性能"},"children":[]},{"data":{"id":"c8aje43pemg0","created":1609780020312,"text":"提升单机架构性能，如使用缓存、异步和无锁结构减少响应时间"},"children":[]}]}]}]},{"data":{"id":"c82163mah5s0","created":1608916132714,"text":"CPU 占用高如何排查"},"children":[{"data":{"id":"c8442nuyfcg0","created":1609127446560,"text":"top 命令看占用高的进程pid\nfree 查看内存占用\ndr 查看硬盘占用"},"children":[]},{"data":{"id":"c8442yiw2ew0","created":1609127469775,"text":"jstack 查看线程堆栈信息，分析线程状态。\n查看是否有堵塞死锁情况。\njstack pid > jstack.log"},"children":[]},{"data":{"id":"c844cbya7c80","created":1609128204281,"text":"可以再找到线程 tid\njstack pid |grep tid 查看具体线程的堆栈信息"},"children":[]},{"data":{"id":"c844ln7y8ps0","created":1609128934088,"text":"分支主题"},"children":[]},{"data":{"id":"c844fb2pw4g0","created":1609128437465,"text":"jstat 查看 GC 日志，看看 GC 是否频繁，是否有\nFull GC 情况"},"children":[]},{"data":{"id":"c844gkkvcko0","created":1609128536518,"text":"jmap -dump:format=b,file=heap.hprof pid\n保存堆现场\n用工具分析，如JVisualVM、MAT、JProfiler等"},"children":[]}]},{"data":{"id":"c8216sho0g80","created":1608916186854,"text":"OOM 如何排查"},"children":[{"data":{"id":"c8aiz4aesfc0","created":1609778845255,"text":"堆OOM，调整  -Xmx 大小"},"children":[]},{"data":{"id":"c8aj03tbbns0","created":1609778922585,"text":"本地内存 OOM，压测线程创建过多占满内存，减少线程池最大线程数，减小堆内存"},"children":[]},{"data":{"id":"c8aj5c8cti80","created":1609779332730,"text":"扩展：栈溢出（比如递归）"},"children":[{"data":{"id":"c8aj6fl92d40","created":1609779418404,"text":"线程请求深度大于虚拟机深度，StackOverflowError"},"children":[]},{"data":{"id":"c8aj6tjbx8g0","created":1609779448763,"text":"虚拟机扩展时无法申请到足够内存，OutOfMemoryError"},"children":[]}]}]},{"data":{"id":"c85fz4dw9880","created":1609262582352,"text":"内存泄漏可能表现情况","note":"如果具有满足一下两个条件的对象：\n1）对象是可达的。即在有向图中，存在通过达到该对象，GC不会回收。\n2）对象的无用的。即程序以后不会再使用这些对象。\n那么这些对象是无有，但是占用着内存空间，并且不会被GC回收这就是所谓的内存泄漏。\n\n如果内存泄漏非常严重的话，最终会导致内存溢出。"},"children":[{"data":{"id":"c85fz8m5yps0","created":1609262591559,"text":"OOM 异常"},"children":[]},{"data":{"id":"c85fzbxpbmw0","created":1609262598787,"text":"内存持续上升"},"children":[]},{"data":{"id":"c85fzjwkdsw0","created":1609262616133,"text":"频繁 Full GC"},"children":[]}]},{"data":{"id":"c8aa5182n340","created":1609753918779,"text":"数据库调优"},"children":[{"data":{"id":"c8aickct9c00","created":1609777077853,"text":"服务器层面优化，参数调整"},"children":[{"data":{"id":"c8aid38pi8w0","created":1609777118963,"text":"根据应用接入设置最大链接数量，一般设个3000"},"children":[]},{"data":{"id":"c8aif8ecpi00","created":1609777286917,"text":"innodb_buffer_pool_size 缓冲区大小，设为系统内存约80%"},"children":[]},{"data":{"id":"c8aig36apvc0","created":1609777353910,"text":"开启慢查询日志，便于定位和监控慢查询 sql"},"children":[]}]},{"data":{"id":"c8aihkik3qo0","created":1609777470021,"text":"数据库设计层面，表设计和结构选择","expandState":"expand"},"children":[{"data":{"id":"c8aihspyogw0","created":1609777487883,"text":"表设计字段的类型选择，长度设置，适当冗余部分字段减少关联表查询"},"children":[]},{"data":{"id":"c8aij7sqy0o0","created":1609777599067,"text":"使用读写分离"},"children":[]},{"data":{"id":"c8ai4mjqug80","created":1609776455712,"text":"分表分库"},"children":[]},{"data":{"id":"c8ai3r7e5tc0","created":1609776387485,"text":"根据业务创建合理的索引"},"children":[{"data":{"id":"c8aip8xekk00","created":1609778071710,"text":"数据唯一性差的字段不适合建索引"},"children":[]},{"data":{"id":"c8aipnflpsw0","created":1609778103286,"text":"频繁更新的字段不适合建索引"},"children":[]},{"data":{"id":"c8aivh98i800","created":1609778560025,"text":"不在 where 后面作为查询条件的不加索引"},"children":[]}]}]},{"data":{"id":"c8ai2yvicyg0","created":1609776325816,"text":"数据库执行层面，优化 sql 语句，合理使用索引"},"children":[{"data":{"id":"c8ai4tjxwoo0","created":1609776470961,"text":"尽量使用主键查询"},"children":[]},{"data":{"id":"c8ai5338ncw0","created":1609776491719,"text":"尽量使用单表查询而不是关联表"},"children":[]},{"data":{"id":"c8aikffx2qo0","created":1609777694070,"text":"优化 sql 语句，使用 explain 查看执行计划并分析"},"children":[{"data":{"id":"c8aiqir0p7s0","created":1609778171456,"text":"只需要少量字段时候不用 select *"},"children":[]},{"data":{"id":"c8airzsd4zc0","created":1609778286907,"text":"关联语句一般是小表关联大表"},"children":[]},{"data":{"id":"c8aiscg68js0","created":1609778314468,"text":"防止索引失效"},"children":[{"data":{"id":"c8aisu7ams80","created":1609778353113,"text":"索引遵循最左匹配原则，只有在查询条件中使用了创建索引时的第一个字段，\n索引才会被使用，使用复合索引时遵循最左前准集合"},"children":[]},{"data":{"id":"c8aiw530z340","created":1609778611892,"text":"<>/ is NULL/ is NOT NULL /Like 等关键字会使索引失效"},"children":[]},{"data":{"id":"c8aixiv8t7c0","created":1609778720261,"text":"or 要使用索引必循每个条件字段都有索引"},"children":[]},{"data":{"id":"c8aiy3dv9080","created":1609778764923,"text":"where 子句索引列上有使用函数运算，索引也会失效"},"children":[]}]}]}]},{"data":{"id":"c8aimql6p400","created":1609777875061,"text":"系统架构层面增强补充"},"children":[{"data":{"id":"c8ain08hm5k0","created":1609777896061,"text":"Redis"},"children":[]},{"data":{"id":"c8ain4q51600","created":1609777905836,"text":"Memcached"},"children":[]}]},{"data":{"id":"c8ainsli9sg0","created":1609777957798,"text":"开发编码层面"},"children":[{"data":{"id":"c8aio6z7x140","created":1609777989102,"text":"使用数据库连接池"},"children":[]},{"data":{"id":"c8ainwk9kyw0","created":1609777966430,"text":"使用批量操作"},"children":[]}]}]}]},{"data":{"id":"c820uin4kbk0","created":1608915225046,"text":"设计模式","progress":1},"children":[{"data":{"id":"c820v4lr3oo0","created":1608915272852,"text":"单例模式"},"children":[]},{"data":{"id":"c820vacwtp40","created":1608915285378,"text":"工厂模式"},"children":[]},{"data":{"id":"c820vexs9zk0","created":1608915295347,"text":"观察者模式"},"children":[]},{"data":{"id":"c820vjew10g0","created":1608915305089,"text":"建造者模式"},"children":[]},{"data":{"id":"c820vn34frs0","created":1608915313084,"text":"代理模式"},"children":[]},{"data":{"id":"c820vw5m6w00","created":1608915332826,"text":"适配者模式"},"children":[]},{"data":{"id":"c820wj0pyfs0","created":1608915382596,"text":"装饰者模式"},"children":[]},{"data":{"id":"c82lsdezjo80","created":1608974300250,"text":"命令模式"},"children":[]},{"data":{"id":"c82lssyz8kg0","created":1608974334110,"text":"策略模式"},"children":[]},{"data":{"id":"c82lt764nbs0","created":1608974365017,"text":"组合模式"},"children":[]},{"data":{"id":"c82ltem4om00","created":1608974381222,"text":"享元模式"},"children":[]},{"data":{"id":"c82ltimv03k0","created":1608974389974,"text":"状态模式"},"children":[]}]},{"data":{"id":"c820ul1p92w0","created":1608915230282,"text":"算法与数据结构","progress":1},"children":[{"data":{"id":"c82ltnkgmug0","created":1608974400713,"text":"算法"},"children":[{"data":{"id":"c82lv38g1r40","created":1608974513179,"text":"排序算法"},"children":[]},{"data":{"id":"c82lvmdwzh40","created":1608974554868,"text":"贪心"},"children":[]},{"data":{"id":"c82lvo2xku00","created":1608974558558,"text":"递归"},"children":[]},{"data":{"id":"c82lvql4f200","created":1608974564011,"text":"二分法"},"children":[]},{"data":{"id":"c82lw1cg46w0","created":1608974587431,"text":"动态规划"},"children":[]},{"data":{"id":"c82lw9ik4p40","created":1608974605215,"text":"跳表"},"children":[]}]},{"data":{"id":"c82lttaoimw0","created":1608974413182,"text":"数据结构"},"children":[{"data":{"id":"c82ltxcvogw0","created":1608974422022,"text":"数组"},"children":[]},{"data":{"id":"c82lu3h4c4w0","created":1608974435339,"text":"链表"},"children":[{"data":{"id":"c8ak49pj0i80","created":1609782069983,"text":"跳表"},"children":[]},{"data":{"id":"c8ak4jaukyw0","created":1609782090864,"text":"双向链表"},"children":[]}]},{"data":{"id":"c82lu6wnjiw0","created":1608974442809,"text":"队列"},"children":[]},{"data":{"id":"c82lu8hs6vs0","created":1608974446263,"text":"哈希表"},"children":[]},{"data":{"id":"c82lubv80z40","created":1608974453606,"text":"树"},"children":[{"data":{"id":"c8ak3iadq400","created":1609782010294,"text":"二叉树"},"children":[]},{"data":{"id":"c8ak3l0qwrk0","created":1609782016242,"text":"红黑树"},"children":[]}]},{"data":{"id":"c82luieqrfk0","created":1608974467847,"text":"图"},"children":[]},{"data":{"id":"c82luubkn000","created":1608974493777,"text":"堆"},"children":[{"data":{"id":"c8ak45jfazk0","created":1609782060907,"text":"最小堆最大堆"},"children":[]}]},{"data":{"id":"c82luveoff40","created":1608974496141,"text":"栈"},"children":[]}]}]}]},"template":"filetree","theme":"classic-compact","version":"1.4.43"}